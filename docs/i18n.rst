Internationalization (i18n)
===========================

SecureDrop is translated into a number of languages. We use a
web-based collaborative translation platform called `Weblate`_ to make
it easier. Under the hood, all translation is done using GNU
`gettext`_.

With `gettext`_, text to be translated is specially marked in source
code. A Python example:

.. code:: python

   if not (msg or fh):
       flash(gettext("You must enter a message or choose a file to submit."), "error")
       return redirect(url_for('main.lookup'))

In this code, the string ``You must enter a message or choose a file to
submit.`` can be automatically extracted for translation. The
``gettext`` function to which it is passed is used as a marker by
`pybabel <https://babel.pocoo.org/en/latest/>`__ or similar tools to collect the
strings to be translated and store them into a `.pot`_ file at
``securedrop/translations/messages.pot``. For instance:

::

    #: source_app/main.py:111
    msgid "You must enter a message or choose a file to submit."
    msgstr ""

The `.pot`_ file serves as a template for all the language-specific
`.po`_ files, which are where Weblate stores the contributed
translations. For each language to be translated, a directory is
created, such as ``securedrop/translations/fr_FR``, and populated with
a `.po`_ file derived from the template. For instance,
``securedrop/translations/fr_FR/LC_MESSAGES/messages.po`` is almost
identical to ``securedrop/translations/messages.pot`` except for the
`msgstr` fields, which will contain the French translations, e.g.:

::

    #: source_app/main.py:111
    msgid "You must enter a message or choose a file to submit."
    msgstr "Vous devez saisir un message ou sélectionner un fichier à envoyer."

There's one last type of file in the `gettext`_ system, a
machine-readable version of the `.po`_ translations called a `.mo`_
file. Applications use these to get translations at runtime. The `.po`_
files are compiled to `.mo`_ files when the SecureDrop package is built.

The desktop icons installed on SecureDrop workstations are also
translated.  The icon templates are in the
``install_files/ansible-base/roles/tails-config/templates`` directory.
Their labels are collected in the ``desktop.pot`` file and translated
in the corresponding `.po`_ files in the same directory (``fr.po``,
``de.po`` etc.). All translations are merged from the ``*.j2.in``
files into the corresponding ``*.j2`` file and committed to the
SecureDrop repository. They are then installed when configuring Tails
with the ``tasks/create_desktop_shortcuts.yml`` tasks.

We don't expect translators to deal with all these files
directly. Translation happens on our `Weblate`_ server, which is
configured to use a fork of the `main SecureDrop repository`_.

As string changes are merged into the ``develop`` branch
in the `main SecureDrop repository`_, the changes will automatically
appear in Weblate, and translation can begin. Translations take
place continuously, at any time. Translations for a release are
reviewed and finalized during the release process.

What languages are available where?
-----------------------------------

* All languages *translated* in Weblate are *present* in the
  ``securedrop/translations`` directory.
* :doc:`Supported languages <supported_languages>` are listed in the
  ``supported_locales`` object in the `i18n.json`_ file.
* Those languages that are both *present* and *supported* are *available* for
  administrators to *configure* in ``securedrop-admin sdconfig``.
* Those languages that are both *configured* and *available* on the
  *Application Server* are *usable* for users to select.

Development tasks
-----------------

.. _add_a_new_language:

Add a new language
^^^^^^^^^^^^^^^^^^

See :ref:`how_to_add_a_new_language`.

However, SecureDrop only supports a subset of all the languages being worked on
in `Weblate`_.   New languages are supported according to the
:doc:`supported_languages`.

.. _update_strings_to_be_translated:

Update strings to be translated
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Whenever strings are modified in the SecureDrop source, whether in
Python code, HTML templates, or desktop icon labels, the translation
files should also be updated by running ``make translate`` in the root
of the SecureDrop working copy.

The ``translate`` target gathers source strings, then updates the 
`.pot`_ files for the SecureDrop server code and the desktop icons, as well as
the `.po`_ files for each language.

After running ``make translate``, carefully review the output of ``git
diff``. Check ``securedrop/messages.pot`` first for updated strings,
looking for problems like:

* overly idiomatic English
* fragmented text, such as pieces of a sentence intended to be
  concatenated together, which can be difficult to translate
* messages that are marked with plain ``gettext`` and contain plurals
  based on numeric placeholder variables -- these should generally be
  marked with ``ngettext`` so that they can be translated properly in
  languages with complex plural forms

Then review the ``messages.po`` of one existing translation, with a
focus on new translations, which are often marked `fuzzy
<https://www.gnu.org/software/gettext/manual/html_node/Fuzzy-Entries.html>`__. There
is no need to review multiple languages' ``.po`` files because they
are processed in the same way.

Once you've reviewed the changes, submit them in a pull request for the
``develop`` branch in the `main SecureDrop repository`_.  Use the previous
``l10n: update strings to be translated for vX.Y.Z`` pull request as a
template.

.. _merge_develop_to_weblate:

Merge develop into the Weblate fork
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1) First make sure the translation files on the ``develop`` branch of
the `main SecureDrop repository`_ contain the latest source
strings. Follow the steps under
:ref:`update_strings_to_be_translated`.

2) Then, translation must be suspended in `Weblate`_, and any
uncommitted changes committed and pushed, to avoid conflicts:

* Go to the `Weblate repository page for SecureDrop`_.

|Weblate commit Lock|

* Click ``Commit``.
* Click ``Push``.
* And finally, click ``Lock``.

|Weblate commit Locked|

3) The ``securedrop/develop`` branch can now be merged into
   ``securedrop-i18n/i18n``:

.. code:: sh

    $ git clone https://github.com/freedomofpress/securedrop
    $ cd securedrop
    $ git remote add i18n git@github.com:freedomofpress/securedrop-i18n.git
    $ git fetch i18n
    $ git checkout -b i18n i18n/i18n
    $ git merge origin/develop
    $ git commit --amend -m 'l10n: sync with upstream origin/develop'
    $ git push i18n i18n


4) Verify that Weblate has the latest changes, and unlock the repository.

* Go to the `Weblate commit page for SecureDrop`_ and verify the
  commit hash matches the last commit of the ``i18n`` branch. This must
  happen instantly after the branch is pushed because Weblate is
  notified via a webhook. If it is different,
  `ask for help <https://gitter.im/freedomofpress/securedrop>`__.

* Click ``Unlock``.

|Weblate commit Unlock|

Translation can now begin. As translators make progress, `Weblate`_
pushes the translations done via the web interface in commits to the
``i18n`` branch of the `securedrop-i18n repository`_ (a fork of the
`main SecureDrop repository`_). When the translation period ends,
these commits will be collected into a pull request for the `main
SecureDrop repository`_.

|Weblate commit Unlocked|


.. _merge_weblate_to_develop:

Merge translations back to develop
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Weblate`_ automatically pushes the translations done via the web
interface as a series of commits to the ``i18n`` branch in the
`securedrop-i18n repository`_, which is a fork of the ``develop``
branch of the `main SecureDrop repository`_. These translations need
to be submitted back to the ``securedrop/develop`` branch via pull
requests. When you create a branch for this, begin its name with
``i18n-``, as that prefix triggers special CI tests for translations.

To fetch the latest translations from the ``securedrop-i18n/i18n`` branch into your
working copy of the SecureDrop repository, run these commands in your
repo root:

.. code:: sh

    $ git checkout -b i18n-merge origin/develop
    $ securedrop/bin/dev-shell ./i18n_tool.py --verbose update-from-weblate
    $ securedrop/bin/dev-shell ./i18n_tool.py --verbose update-docs --docs-repo-dir /path/to/documentation

You now have the latest translations on your ``i18n-merge`` branch.

.. warning::

    Pending `securedrop#6879`_, ``i18n_tool.py update-from-weblate`` will stage
    changes from the ``securedrop/desktop`` Weblate component for *all*
    languages, not only supported ones.  Review ``git status`` and unstage
    changes in ``install_files/ansible-base/roles/tails-config/templates`` for
    unsupported languages.

.. note::

    It is **very** important to check that each translated string
    looks like a plausible translation, with no markup. Even if the
    reviewer does not understand the language, if a translated string
    looks strange, someone other than the reviewer must be consulted
    to verify it means something. It is extremely unlikely that a
    contributor will manipulate a translated string to introduce a
    vulnerability in SecureDrop, but any suspicious translation should
    be investigated.

To check the new translations, you'll need to compile them and verify
them by running our automated tests and, ideally, by checking them in
the SecureDrop source and journalist interfaces.

Compile translations
~~~~~~~~~~~~~~~~~~~~

At runtime, `gettext`_ needs a compiled file for each language (the
`.mo`_ files). Before you can check the translations in the SecureDrop
web interfaces, these need to be created:

.. code:: sh

    $ securedrop/bin/dev-shell make extract-strings

For the desktop icons of the source and journalist interfaces,
compilation updates their template files with all the translations
collected from the `.po`_ files.

This can be done by running the following command:

.. code:: sh

    $ securedrop/bin/dev-shell make extract-desktop-strings

Verify translations
~~~~~~~~~~~~~~~~~~~

SecureDrop web interfaces
"""""""""""""""""""""""""

After a translation is compiled, the web page in which it appears can
be verified visually by starting the SecureDrop development servers
and navigating via ``http://localhost:8080`` for the source interface
or ``http://localhost:8081`` for the journalist interface. You can
start the development servers with:

.. code:: sh

     $ make dev

The translations can be checked automatically by running the
SecureDrop page layout tests:

.. code:: sh

     $ export PAGE_LAYOUT_LOCALES="en_US,fr_FR"  # may be set to any supported languages
     $ make test TESTFILES=tests/functional/pageslayout
     [...]
     tests/pageslayout/test_journalist.py::TestJournalistLayout::test_account_edit_hotp_secret[en_US] PASSED
     tests/pageslayout/test_journalist.py::TestJournalistLayout::test_account_edit_hotp_secret[fr_FR] PASSED
     [...]

.. note:: if unset, PAGE_LAYOUT_LOCALES defaults to en_US (US English) and ar (Arabic).

After running the tests, screenshots for each locale are available
in ``securedrop/tests/pageslayout/screenshots/<locale>``,
e.g. ``securedrop/tests/pageslayout/screenshots/fr_FR``. Screenshot
filenames can be found in the tests that created them, in
``securedrop/tests/pageslayout/test_journalist.py`` or
``securedrop/tests/pageslayout/test_source.py``.

Desktop icons
"""""""""""""

The translated templates for the desktop icons are:

- ``install_files/ansible-base/roles/tails-config/templates/desktop-journalist-icon.j2``
- ``install_files/ansible-base/roles/tails-config/templates/desktop-source-icon.j2``

Check that each of them contains a ``Name`` line for each of SecureDrop's supported locales.

Push your branch and create a pull request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After you've checked the translations, you're ready to push your
``i18n-merge`` branch and create a pull request to get the
translations merged to the SecureDrop ``develop`` branch.

.. note:: If there have been multiple commits per language, as can
          happen if source strings need to be translated again after
          being changed to correct critical errors, or to incorporate
          suggestions from the source string feedback period, they
          should be combined via an interactive rebase. Reorder the
          commits to group them by language, then squash the commits
          for each language into one. The goal is to end up with one
          commit per supported language on the merge branch.

When you're happy with the state of language commits on your merge branch:

.. code:: sh

    $ git commit -m "l10n: compile desktop icons' translations" # if needed
    $ git push -u origin i18n-merge

.. note:: The CI job ``translation-tests`` will automatically run the
          above page layout tests in all supported languages on
          branches named with the prefix ``i18n-``. If you've followed
          that naming convention, the translation tests should soon be
          run on your pull request.

          If you have an abundance of time, you can run all the
          translation tests locally with:

          .. code:: sh

              $ make translation-test

And at long last, you're done. Go to
https://github.com/freedomofpress/securedrop and propose a pull
request.

.. note:: Unlike the SecureDrop application translations, the desktop
          icon translations are compiled and merged into the
          repository. They need to be available in their translated
          form when ``securedrop-admin tailsconfig`` is run, because
          the development environment is not available.

.. _i18n_release:


Update Weblate screenshots
^^^^^^^^^^^^^^^^^^^^^^^^^^

You can use the script ``securedrop/upload_screenshots.py`` to update
UI screenshots that are used to illustrate strings in Weblate. The script
depends on the existence of up-to-date layout test results, which you can
generate using this command in the base directory:

.. code:: sh

    $ LOCALES=en_US make translation-test

Inspect the screenshots in the directory ``securedrop/tests/pageslayout/screenshots/en_US``
and make sure that their content corresponds to the expected version of the
codebase.

`Obtain your API key <https://weblate.securedrop.org/accounts/profile/#api>`__
in Weblate. Export the token to the environment variable ``WEBLATE_API_TOKEN``.
You can now run this command to perform an upload:

.. code:: sh

    $ securedrop/upload-screenshots.py

If new screenshots were added as part of this run, make sure to associate them
with relevant strings in Weblate, which you can do from the
`screenshots list <https://weblate.securedrop.org/screenshots/securedrop/securedrop/>`__.

.. _release_management:

Release Management
------------------

Two weeks before the release: string freeze
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    If both a Localization Manager and a deputy are assigned for this release,
    consider pairing on this ceremony, both for knowledge-sharing and so that
    the intermediate pull requests can be reviewed and merged promptly.

When features for a new SecureDrop release are frozen, the localization manager for the release will:

* :ref:`merge_develop_to_weblate`.
* `Update Weblate screenshots`_ so translators can see new or modified source strings in context.
* Update the `i18n timeline`_ in the translation section of the forum.
* Add a `Weblate announcement`_ for the ``securedrop/securedrop`` component with
  the translation timeline for the release.

  * **Important:** Make sure the ``Notify users`` box is checked, so that
    translators receive an email alert.

  * You can view a history of past announcements in Weblate's `Django admin
    panel`_, or use this template:

      Translation for the SecureDrop X.Y.Z release has begun.  If you have
      suggestions for source strings, please get them to us by YYYY-MM-DD.
      Translation will end on YYYY-MM-DD.

  * Set the **Expiry date** to release day itself (the day *after* the translation deadline).
* Remind all developers about the string freeze in `Gitter <https://gitter.im/freedomofpress/securedrop>`__,
  for example using this template:

    Hello! We've just opened translations for the upcoming SecureDrop 2.3.0
    release.  If you have suggestions for source strings, please get them to us
    by 2022-03-20.  Translation will end on 2022-03-27.

    Translations are done using Weblate (https://weblate.securedrop.org/projects/securedrop/securedrop/).  If you haven't used it before, <https://developers.securedrop.org/en/latest/translations.html> has instructions on how to get started.

* Update Localization Lab via the
  `SecureDrop Coordination <https://community.internetfreedomfestival.org/community/channels/securedrop-coordination>`__ channel
  in the `TCU Mattermost <https://wiki.digitalrights.community/index.php?title=TCU_Mattermost>`__.
* During the feedback period, monitor Weblate comments and suggestions, and open
  a pull request for every source string suggestion coming from translators.

Remember that :ref:`supported languages <add_a_new_language>` are the
priority during this period.  That is, while translation contributions
are welcome for all languages, the pre-release goal is to keep the
current set of supported languages at 100% translation in Weblate.
Localization Lab can marshal individual translators to help meet this
goal.

.. _release_day:

Release day
^^^^^^^^^^^
.. note::

    If both a Localization Manager and a deputy are assigned for this release,
    consider pairing on this ceremony, both for knowledge-sharing and so that
    the intermediate pull requests can be reviewed and merged promptly.

Prior to cutting the final release, the localization manager must:

* :ref:`merge_weblate_to_develop`
  (`see example PR <https://github.com/freedomofpress/securedrop/pull/6646>`__)
* Submit a backport PR of these changes into the release branch
  (`see example PR <https://github.com/freedomofpress/securedrop/pull/6647>`__)

  * If you forgot to backport the *source-string* changes into the release branch,
    you'll need to include those too for a clean cherry-pick
    (`see example PR <https://github.com/freedomofpress/securedrop/pull/6872>`__)

* :ref:`Update the documentation screenshots <updating_screenshots>`.
* Provide translator credits to add to the SecureDrop release announcement.

Then, post-release, either same day or day-after, the localization manager should:

* Remove the `Weblate announcement`_ about this release's translation timeline
  (if you set an end-date on the original announcement, this may happen automatically)
* Update the `i18n timeline`_ in the forum.
* Update the `tracking spreadsheet`_ with supported languages' current
  translation and review coverage.  File a ticket for each new language due
  either (a) consideration for new support, (b) probation for dropping coverage,
  or (c) revocation of support.

Translator credits
^^^^^^^^^^^^^^^^^^

Correct acknowledgment of translators' contributions is important, so
``i18n_tool.py`` makes it easy to list the translators who have helped
since the last merge of Weblate translations, with ``i18n_tool.py
list-translators``. A list of everyone who has ever contributed
translations to SecureDrop can be obtained with ``i18n_tool.py
list-translators --all``. There are ``Makefile`` targets for these,
``list-translators`` and ``list-all-translators``, e.g:

.. code:: sh

    $ make list-all-translators
    ar:
      A. Nonymous
      Ahmad Gharbeia
      Ahmed Essam
      Ali Boshanab
    [...]

.. _i18n-administrator-permissions:

Weblate administration
----------------------

.. note:: The privilege escalation workflow is different for
          :ref:`code maintainers <contributor-permissions>` and
          :ref:`translation maintainers <i18n-administrator-permissions>`.

A translation admin has special permissions on `Weblate`_ and the
repositories. When someone is willing to become an admin, a thread is
started in `the translation section of the forum
<https://forum.securedrop.org/c/translations>`_. If there is consensus
after a week, the permissions of the new admin are elevated. If there
is not yet consensus, a public vote is organized among the current
admins.

The privileges of an admin who has not been active for six months or
more are revoked, but they can apply again at any time.

The community of SecureDrop translators works very closely with the
SecureDrop developers and some of them participate in both
groups. However, the translator community has a different set of rules
and permissions, and therefore independent policies from SecureDrop
itself.

Admin permissions
^^^^^^^^^^^^^^^^^

The full set of admin permissions can be granted at:

* https://weblate.securedrop.org/admin/weblate_auth/user/ (grant staff and superuser status)
* https://forum.securedrop.org/admin/users/list/active (click on the user and ``Grant Moderation``)
* https://github.com/freedomofpress/securedrop-i18n (make sure that the user has commit access)

Granting reviewer privileges in Weblate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Visit https://weblate.securedrop.org/admin/weblate_auth/user/.
* Click on the user name.
* In the ``Groups`` block:
    * Select ``Localizationlab`` in the ``Available groups`` list and
      click on the right arrow to move it to the ``Chosen groups``
      list.
    * Select ``Users`` in the ``Chosen groups`` list and click on the
      left arrow to remove it.

Update the Weblate full text index
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Weblate`_'s full-text index can occasionally get out of sync. When
this happens, `Weblate`_'s search may fail to find a word that you
know exists in the source strings. You can rebuild the index with:

.. code:: sh

      $ ssh debian@weblate.securedrop.org
      $ cd /app/weblate
      $ sudo docker-compose run weblate rebuild_index --all --clean

Note that the new index may not be used right away. Some workers may
still have the old index open. If the index is holding up translators
with a release looming, the server can be rebooted.


.. _`gettext`: https://www.gnu.org/software/gettext/
.. _`.pot`: https://www.gnu.org/software/gettext/manual/gettext.html#index-files_002c-_002epot
.. _`.po`: https://www.gnu.org/software/gettext/manual/gettext.html#PO-Files
.. _`.mo`: https://www.gnu.org/software/gettext/manual/gettext.html#MO-Files
.. _`pybabel`: https://babel.pocoo.org/en/latest/
.. _`Weblate`: https://weblate.securedrop.org/
.. _`main SecureDrop repository`: https://github.com/freedomofpress/securedrop
.. _`securedrop-i18n repository`: https://github.com/freedomofpress/securedrop-i18n
.. _`patch they contain is unique`: https://git-scm.com/docs/git-patch-id
.. _`Weblate commit page for SecureDrop`: https://weblate.securedrop.org/projects/securedrop/securedrop/#information
.. _`Weblate repository page for SecureDrop`: https://weblate.securedrop.org/projects/securedrop/securedrop/#repository
.. _`Weblate translation creation page`: https://weblate.securedrop.org/new-lang/securedrop/securedrop/
.. _`Weblate desktop translation creation page`: https://weblate.securedrop.org/new-lang/securedrop/desktop/
.. _`i18n timeline`: https://forum.securedrop.org/t/about-the-translations-category/16
.. _`Weblate announcement`: https://weblate.securedrop.org/projects/securedrop/securedrop/#announcement
.. _`Django admin panel`: https://weblate.securedrop.org/admin/trans/announcement/
.. _`i18n.json`: https://github.com/freedomofpress/securedrop/blob/develop/securedrop/i18n.json
.. _`tracking spreadsheet`: https://docs.google.com/spreadsheets/d/1IfGqf3tgcW9PoL1h8vRJG6lTqVZuNsPYIbhG947FKMk/edit
.. _`securedrop#6879`: https://github.com/freedomofpress/securedrop/issues/6879

.. |Weblate commit Lock| image:: images/weblate/admin-lock.png
.. |Weblate commit Locked| image:: images/weblate/admin-locked.png
.. |Weblate commit Unlock| image:: images/weblate/admin-unlock.png
.. |Weblate commit Unlocked| image:: images/weblate/admin-unlocked.png
